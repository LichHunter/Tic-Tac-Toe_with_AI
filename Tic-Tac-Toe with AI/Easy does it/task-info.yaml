type: edu
custom_name: stage2
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;

      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
- name: test/Grid.java
  visible: false
  text: |-
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Grid {

        private final CellState[][] grid;

        private Grid() {
            grid = new CellState[3][3];
        }

        public static Grid fromLine(String line) {
            Grid grid = new Grid();

            if (line.length() != 9) {
                throw new WrongAnswer("Wrong input length. Expected 9.\nFound " + line.length());
            }

            for (int i = 0; i < line.length(); i++) {
                grid.grid[i / 3][i % 3] = CellState.get(line.charAt(i));
            }

            return grid;
        }

        public static Grid fromOutput(String stringField) {
            return fromOutput(stringField, 1);
        }

        public static Grid fromOutput(String stringField, int fieldNumber) {

            Grid grid = new Grid();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() < 3 * fieldNumber) {
                throw new WrongAnswer("Expected not less than " + fieldNumber + " grids in the output!\n" +
                    "Make sure you print the game grids in the correct format!");
            }

            fieldLines = fieldLines.subList(fieldNumber * 3 - 3, fieldNumber * 3);

            for (int i = 0; i < fieldLines.size(); i++) {
                String line = fieldLines.get(i);
                if (line.length() != 9) {
                    throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                }
                for (int j = 0; j < 3; j++) {
                    grid.grid[i][j] = CellState.get(line.charAt(j * 2 + 2));
                }
            }

            return grid;
        }

        public static List<Grid> allGridsFromOutput(String stringField) {

            List<Grid> gridList = new ArrayList<>();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() % 3 != 0) {
                throw new WrongAnswer("Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!");
            }

            for (int i = 0; i < fieldLines.size() / 3; i++) {
                List<String> gridLines = fieldLines.subList(i * 3, i * 3 + 3);

                Grid grid = new Grid();

                for (int j = 0; j < gridLines.size(); j++) {
                    String line = gridLines.get(j);
                    if (line.length() != 9) {
                        throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                    }
                    for (int k = 0; k < 3; k++) {
                        grid.grid[j][k] = CellState.get(line.charAt(k * 2 + 2));
                    }
                }

                gridList.add(grid);
            }

            return gridList;
        }

        public static Position getMove(Grid from, Grid to) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (from.grid[i][j] != to.grid[i][j]) {
                        return new Position(i, j);
                    }
                }
            }
            throw new WrongAnswer("After making a move the grid was the same!");
        }

        public boolean isWin(CellState player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][2] == player) {
                    return true;
                }
            }

            for (int i = 0; i < 3; i++) {
                if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[2][i] == player) {
                    return true;
                }
            }

            return grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[2][2] == player
                || grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2] && grid[0][2] == player;
        }

        public boolean hasEmptyCells() {
            return Arrays.stream(grid)
                .flatMap(Stream::of)
                .anyMatch(cell -> cell == CellState.EMPTY);
        }

        public int getNumOfEmptyCells() {
            return (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.EMPTY).count();
        }

        public GameState getGameState() {
            if (isWin(CellState.X)) return GameState.X_WIN;
            if (isWin(CellState.O)) return GameState.O_WIN;
            if (hasEmptyCells()) return GameState.NOT_FINISHED;
            else return GameState.DRAW;
        }

        public CellState[][] getGrid() {
            return grid;
        }

        public void setCell(int x, int y, CellState cellState) {
            grid[x][y] = cellState;
        }

        public boolean isCorrectNextGrid(Grid grid) {
            return getNumOfEmptyCells() - grid.getNumOfEmptyCells() == 1;
        }

        public boolean isValidGrid() {

            int numOfX = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.X).count();
            int numOfO = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.O).count();

            return Math.abs(numOfO - numOfX) <= 1;
        }

        public static void checkGridSequence(List<Grid> grids) {
            if (grids.size() <= 1) {
                return;
            }

            for (int i = 1; i < grids.size(); i++) {
                Grid prevGrid = grids.get(i - 1);
                Grid grid = grids.get(i);
                if (!grid.isValidGrid()) {
                    throw new WrongAnswer("Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + grid);
                }
                if (!prevGrid.isCorrectNextGrid(grid)) {
                    throw new WrongAnswer("After making a move on grid\n" + prevGrid + "\n it can't become\n" + grid);
                }
            }

            Grid lastGrid = grids.get(grids.size() - 1);

            if (lastGrid.getGameState() == GameState.NOT_FINISHED) {
                throw new WrongAnswer("Last grid is not terminal!\n" + lastGrid);
            }
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------").append("\n");
            for (int i = 0; i < 3; i++) {
                stringBuilder.append("| ").append(grid[i][0]).append(" ").append(grid[i][1]).append(" ").append(grid[i][2]).append(" |\n");
            }
            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        private String toLine() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                result.append(grid[i / 3][i % 3]);
            }
            return result.toString();
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Grid)) {
                return false;
            }

            Grid grid = (Grid) o;

            for (int i = 0; i < 9; i++) {
                if (grid.grid[i / 3][i % 3] != this.grid[i / 3][i % 3]) {
                    return false;
                }
            }
            return true;
        }

        public Grid copy() {
            return Grid.fromLine(toLine());
        }
    }

    enum GameState {

        X_WIN, O_WIN, DRAW, NOT_FINISHED

    }

    enum CellState {

        X("X"), O("O"), EMPTY(" ");

        String value;

        CellState(String value) {
            this.value = value;
        }

        static CellState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return EMPTY;
                default:
                    throw new WrongAnswer("Bad symbol '" + symbol + "' in the game grid");
            }
        }

        static CellState getOpponent(CellState player) {
            if (player == X) {
                return O;
            } else {
                return X;
            }
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: false
- name: test/Minimax.java
  visible: false
  text: |+
    import java.util.ArrayList;
    import java.util.List;

    public class Minimax {

        private static Position bestPosition;

        public static Position getMove(Grid grid, CellState player) {

            int bestScore = Integer.MIN_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        if (score > bestScore) {
                            bestScore = score;
                            bestPosition = new Position(i, j);
                        }
                    }
                }
            }

            return bestPosition;
        }

        private static int minimax(Grid grid, CellState player, boolean isMaximize, CellState startPlayer, int depth) {

            switch (grid.getGameState()) {
                case X_WIN:
                    return startPlayer == CellState.X ? 10 - depth : depth - 10;
                case O_WIN:
                    return startPlayer == CellState.O ? 10 - depth : depth - 10;
                case DRAW:
                    return 0;
            }

            int bestScore = isMaximize ? Integer.MIN_VALUE : Integer.MAX_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), !isMaximize, startPlayer, depth + 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        bestScore = isMaximize ? Math.max(bestScore, score) : Math.min(bestScore, score);
                    }
                }
            }

            return bestScore;
        }

        public static List<Position> getAvailablePositions(Grid grid, CellState player) {

            List<Position> positions = new ArrayList<>();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        if (score >= 0) {
                            positions.add(new Position(i, j));
                        }
                        grid.setCell(i, j, CellState.EMPTY);
                    }
                }
            }

            return positions;
        }
    }

    class Position {

        int x;
        int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return x + " " + y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Position position = (Position) o;
            return x == position.x &&
                y == position.y;
        }
    }



  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            for (int i = 0; i < 30; i++) {
                TestedProgram program = new TestedProgram();
                program.start();

                String output = program.execute("2 2");

                Grid gameGrid = Grid.fromOutput(output, 2);

                CellState[][] cellStates = gameGrid.getGrid();

                if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                    output = program.execute("1 1");
                    gameGrid = Grid.fromOutput(output, 2);
                    if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                        return CheckResult.correct();
                    }
                } else {
                    output = program.execute("1 3");
                    gameGrid = Grid.fromOutput(output, 2);
                    if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                        return CheckResult.correct();
                    }
                }

                program.stop();
            }

            return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
        }
    }
  learner_created: false
  - name: src/tictactoe/Field.java
    visible: true
    text: "package tictactoe;\n\n\n/**\n * Class contains game field and methods to\
    \ interact with it\n */\npublic class Field {\n\tprivate final String[][] field;\
    \ // game field must be square matrix\n\tprivate final Checker CHECKER;\n\n\t\
    Field(Checker checker) {\n\t\tthis.field = new String[3][3];\n\t\tthis.CHECKER\
    \ = checker;\n\t}\n\n\tpublic Field(String[][] field, Checker checker) {\n\t\t\
    this.field = field;\n\t\tthis.CHECKER = checker;\n\t}\n\n\tpublic Field(int size,\
    \ Checker checker) {\n\t\tthis.field = new String[size][size];\n\t\tthis.CHECKER\
    \ = checker;\n\t}\n\n\t/**\n\t * Method will count number of each player chars\
    \ and determine who should go next\n\t *\n\t * @return \"X\" - number of \"O\"\
    \ chars bigger or lover then number of \"X\" chars\n\t */\n\tpublic String determineWhoMakeNextMove()\
    \ {\n\t\tint x = 0;\n\t\tint o = 0;\n\n\t\t//count number of each char\n\t\tfor\
    \ (String[] row : field) {\n\t\t\tfor (String cell : row) {\n\t\t\t\tif (\"X\"\
    .equals(cell)) {\n\t\t\t\t\tx++;\n\t\t\t\t} else if (\"O\".equals(cell)) {\n\t\
    \t\t\t\to++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn x <= o ? \"X\" : \"O\";\n\
    \t}\n\n\t/**\n\t * Method will fill field with given input\n\t *\n\t * @param\
    \ input string with similar insides - ___XXOO_X, \"_\" - nothing\n\t * @throws\
    \ IllegalArgumentException if length of input is not equal to size of field\n\t\
    \ */\n\tpublic void fillField(String input) throws IllegalArgumentException {\n\
    \t\tif (input.length() != Math.pow(field.length, 2)) {\n\t\t\tthrow new IllegalArgumentException(\"\
    Length of input (\"\n\t\t\t\t\t+ input + \") is not equal to number of cells in\
    \ field (\" + Math.pow(field.length, 2) + \")\");\n\t\t}\n\n\t\tString[] signs\
    \ = input.split(\"\");\n\t\tint counter = 0;\n\n\t\tfor (int i = 0; i < field.length;\
    \ i++) {\n\t\t\tfor (int j = 0; j < field[0].length; j++) {\n\t\t\t\tif (\"_\"\
    .equals(signs[counter])) {\n\t\t\t\t\tfield[i][j] = \" \";\n\t\t\t\t} else {\n\
    \t\t\t\t\tfield[i][j] = signs[counter];\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t\
    }\n\t\t}\n\t}\n\n\tpublic void putOnField(String input, String coordinates) throws\
    \ IllegalArgumentException {\n\t\ttry {\n\t\t\tCHECKER.checkCoordinates(coordinates,\
    \ field);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new IllegalArgumentException(e.getMessage());\n\
    \t\t}\n\n\t\tString[] splitCoordinates = coordinates.split(\"[,.\\\\s]+\");\n\t\
    \tString cell = field[Integer.parseInt(splitCoordinates[0]) - 1][Integer.parseInt(splitCoordinates[1])\
    \ - 1];\n\n\t\tif (!\"X\".equals(cell) && !\"O\".equals(cell)) {\n\t\t\tfield[Integer.parseInt(splitCoordinates[0])\
    \ - 1][Integer.parseInt(splitCoordinates[1]) - 1] = input;\n\t\t} else {\n\t\t\
    \tthrow new IllegalArgumentException(\"This cell is occupied! Choose another one!\"\
    );\n\t\t}\n\t}\n\n\t/**\n\t * Show field\n\t */\n\tpublic void showField() {\n\
    \t\tfor (int i = 0; i < field[0].length * 2 + 2; i++) {\n\t\t\tSystem.out.print(\"\
    -\");\n\t\t}\n\t\tSystem.out.println();\n\n\t\tfor (String[] row : field) {\n\t\
    \t\tSystem.out.print(\"| \");\n\t\t\tfor (String cell : row) {\n\t\t\t\tSystem.out.print(cell\
    \ + \" \");\n\t\t\t}\n\t\t\tSystem.out.println(\"|\");\n\t\t}\n\n\t\tfor (int\
    \ i = 0; i < field[0].length * 2 + 2; i++) {\n\t\t\tSystem.out.print(\"-\");\n\
    \t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic String[][] getField() {\n\t\t\
    return field;\n\t}\n}\n"
    learner_created: true
  - name: src/tictactoe/Difficulty.java
    visible: true
    text: "package tictactoe;\n\npublic enum Difficulty {\n\tEASY,\n\tMEDIUM,\n\tHARD\n\
    }\n"
    learner_created: true
  - name: src/tictactoe/Checker.java
    visible: true
    text: "package tictactoe;\n\n/**\n * Class contains methods to check given input\
    \ for correctness\n */\npublic class Checker {\n\t/**\n\t * Method will check\
    \ if coordinates are numbers and they are pointing to anything in game field\n\
    \t *\n\t * @param coordinates string contains two numbers (row, column) e.g. 1\
    \ 2, 3 4, ...\n\t * @param field       two dimensional game field\n\t * @throws\
    \ IllegalArgumentException is thrown if coordinates are not numbers or they don't\
    \ point to anything\n\t */\n\tpublic void checkCoordinates(String coordinates,\
    \ String[][] field) throws IllegalArgumentException {\n\t\t//check if input is\
    \ letters\n\t\tif (coordinates.matches(\"([a-zA-Z]+|[a-zA-Z]+ [a-zA-Z]+)+\"))\
    \ {\n\t\t\tthrow new IllegalArgumentException(\"You should enter numbers!\");\n\
    \t\t}\n\n\t\ttry {\n\t\t\tString[] input = coordinates.split(\"[,.\\\\s]+\");\n\
    \n\t\t\t//check if input is digits only\n\t\t\tif (input[0].matches(\"\\\\d+\"\
    ) && input[1].matches(\"\\\\d+\")) {\n\t\t\t\t//check if coordinates point to\
    \ anything in field\n\t\t\t\ttry {\n\t\t\t\t\tString cell = field[Integer.parseInt(input[0])\
    \ - 1][Integer.parseInt(input[1]) - 1];\n\t\t\t\t} catch (ArrayIndexOutOfBoundsException\
    \ e) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Coordinates should be from\
    \ 1 to 3!\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (ArrayIndexOutOfBoundsException\
    \ e) {\n\t\t\tthrow new IllegalArgumentException(\"Coordinates should contain\
    \ two numbers separated by space\");\n\t\t}\n\t}\n\n\t/**\n\t * Check game state\n\
    \t *\n\t * @param field two dimensional array that contains game field\n\t * @return\
    \ State.X -> X has won, State.O - O has won, State.Draw - draw, State.Continue\
    \ - game can be continued\n\t */\n\tpublic State checkGameState(String[][] field)\
    \ {\n\t\tState result = checkRows(field);\n\t\tif (result != null) return result;\n\
    \n\t\tresult = checkColumns(field);\n\t\tif (result != null) return result;\n\n\
    \t\tresult = checkDiagonals(field);\n\t\tif (result != null) return result;\n\n\
    \t\tState draw = checkForDraw(field);\n\t\tif (draw != null) return draw;\n\n\t\
    \treturn State.Continue;\n\t}\n\n\tprivate State checkForDraw(String[][] field)\
    \ {\n\t\t//if all cells are occupied and no one has won -> draw\n\t\tfor (String[]\
    \ row : field) {\n\t\t\tfor (String cell : row) {\n\t\t\t\tif (\" \".equals(cell))\
    \ {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn State.Draw;\n\
    \t}\n\n\tprivate State checkDiagonals(String[][] field) {\n\t\tStringBuilder builder\
    \ = new StringBuilder();\n\n\t\t//check main diagonal\n\t\tfor (int i = 0; i <\
    \ field.length; i++) {\n\t\t\tbuilder.append(field[i][i]);\n\t\t}\n\n\t\tif (builder.toString().matches(\"\
    XXX\")) {\n\t\t\treturn State.X;\n\t\t} else if (builder.toString().matches(\"\
    OOO\")) {\n\t\t\treturn State.O;\n\t\t}\n\n\t\tbuilder = new StringBuilder();\n\
    \t\tint num = field.length - 1;\n\n\t\t//check side diagonal\n\t\tfor (String[]\
    \ strings : field) {\n\t\t\tbuilder.append(strings[num]);\n\t\t\tnum--;\n\t\t\
    }\n\n\t\tif (builder.toString().matches(\"XXX\")) {\n\t\t\treturn State.X;\n\t\
    \t} else if (builder.toString().matches(\"OOO\")) {\n\t\t\treturn State.O;\n\t\
    \t}\n\n\t\treturn null;\n\t}\n\n\tprivate State checkColumns(String[][] field)\
    \ {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tfor (int i = 0; i\
    \ < field[0].length; i++) {\n\t\t\tfor (String[] strings : field) {\n\t\t\t\t\
    builder.append(strings[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (builder.toString().matches(\"\
    XXX\")) {\n\t\t\treturn State.X;\n\t\t} else if (builder.toString().matches(\"\
    OOO\")) {\n\t\t\treturn State.O;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate\
    \ State checkRows(String[][] field) {\n\t\tfor (String[] row : field) {\n\t\t\t\
    StringBuilder builder = new StringBuilder();\n\n\t\t\tfor (String cell : row)\
    \ {\n\t\t\t\tbuilder.append(cell);\n\t\t\t}\n\n\t\t\tif (builder.toString().matches(\"\
    XXX\")) {\n\t\t\t\treturn State.X;\n\t\t\t} else if (builder.toString().matches(\"\
    OOO\")) {\n\t\t\t\treturn State.O;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n"
    learner_created: true
  - name: src/tictactoe/State.java
    visible: true
    text: "package tictactoe;\n\npublic enum State {\n\tX(\"X wins\"),\n\tO(\"O wins\"\
    ),\n\tDraw(\"Draw\"),\n\tContinue(\"Game not finished\");\n\n\tprivate final String\
    \ message;\n\n\tState(String message) {\n\t\tthis.message = message;\n\t}\n\n\t\
    public String getMessage() {\n\t\treturn message;\n\t}\n}\n"
    learner_created: true
  - name: src/tictactoe/AI.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/448/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 21 Jan 2021 12:45:44 UTC
record: 2
